# -*- coding: utf-8 -*-
"""
Created on Tue Mar 26 17:18:42 2024

@author: 86182
"""
#多分类问题
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import roc_auc_score, roc_curve

# 第一条曲线
you_true = [[0,0,1],[0,1,0],[1,0,0],[0,0,1],[1,0,0],[0,1,0],[0,1,0],[0,1,0],[0,0,1],[0,1,0]]
you_pred = [[0.1,0.2,0.7],[0.1,0.6,0.3],[0.5,0.2,0.3],[0.1,0.1,0.8],[0.4,0.2,0.4],[0.6,0.3,0.1],
            [0.4,0.2,0.4],[0.4,0.1,0.5],[0.1,0.1,0.8],[0.1,0.8,0.1]]
pp1 = [[0, 0.1], [0, 0.1], [1, 0.5], [0, 0.1], [1, 0.4], [0, 0.6], [0, 0.4], [0, 0.4], [0, 0.1], [0, 0.1]]
pp1.sort(key=lambda x: x[1])
pp = pp1[::-1]
you_true1 = [i[0] for i in pp]
you_score1 = [i[1] for i in pp]
fpr1, tpr1, _ = roc_curve(you_true1, you_score1)

# 第二条曲线
pp1 = [[0, 0.2], [1, 0.6], [0, 0.2], [0, 0.1], [0, 0.2], [1, 0.3], [1, 0.2], [1, 0.1], [0, 0.1], [1, 0.8]]
pp1.sort(key=lambda x: x[1])
pp = pp1[::-1]
you_true2 = [i[0] for i in pp]
you_score2 = [i[1] for i in pp]
fpr2, tpr2, _ = roc_curve(you_true2, you_score2)

# 第三条曲线
pp1 = [[1, 0.7], [0, 0.3], [0, 0.3], [1, 0.8], [0, 0.4], [0, 0.1], [0, 0.4], [0, 0.5], [1, 0.8], [0, 0.1]]
pp1.sort(key=lambda x: x[1])
pp = pp1[::-1]
you_true3 = [i[0] for i in pp]
you_score3 = [i[1] for i in pp]
fpr3, tpr3, _ = roc_curve(you_true3, you_score3)

# 绘制前三条曲线
plt.plot(fpr1, tpr1, label='Curve 1')
plt.plot(fpr2, tpr2, label='Curve 2')
plt.plot(fpr3, tpr3, label='Curve 3')

# 计算第四条曲线的FPR和TPR的平均值
fpr4 = [(fpr1[i] + fpr2[i] + fpr3[i]) / 3 for i in range(len(fpr1))]
tpr4 = [(tpr1[i] + tpr2[i] + tpr3[i]) / 3 for i in range(len(tpr1))]

# 绘制第四条曲线
plt.plot(fpr4, tpr4, label='Average Curve', linestyle='--')

# 设置图表标题和轴标签
plt.title("ROC Curve", fontsize=14)
plt.ylabel("True Positive Rate (TPR)", fontsize=14)
plt.xlabel("False Positive Rate (FPR)", fontsize=14)

plt.legend()

plt.show()
















#绘制pr,roc曲线及求auc
# -*- coding: utf-8 -*-
"""
Created on Sun Mar 24 19:54:27 2024

@author: 86182
"""

import matplotlib.pyplot as plt
import numpy as np

pp1 = [[1,0.90],[0,0.40],[0,0.20],[1,0.60],[0,0.50],[0,0.40],[1,0.70],[1,0.40],[0,0.65],[0,0.35]]
#pp = pp1.sort(key=lambda )
pp1.sort(key=lambda pp1:pp1[1])
pp = pp1[::-1]

aa1 = [0.90, 0.40, 0.20, 0.60,0.50,0.40,0.70,0.40,0.65,0.35]
aa1.sort()
aa = aa1[::-1]


recall = []
precision = []
TPR = []
FPR = []

for a in aa:
    tp = 0
    fn = 0
    fp = 0
    tn = 0
    x = 0
    y = 0
    
    for p in pp:
        if (p[0] == 1) and (p[1] >= a):
            tp+=1
        elif (p[0] == 1) and (p[1] < a):
            fn+=1
        elif (p[0] == 0) and (p[1] >= a):
            fp+=1
        elif (p[0] == 0) and (p[1] < a):
            tn+=1
    x = float(tp)/(tp + fn)
    y = float(tp)/(tp + fp)
    fpr = float(fp)/(tn + fp)
    
    recall.append(x)
    precision.append(y)
    TPR.append(x)
    FPR.append(fpr)

#绘制PR曲线
recall.sort()
plt.figure()
plt.title('precision-recall curve',fontsize=20)
plt.plot(recall,precision)
plt.plot(recall,precision,'ro')
plt.ylabel('Precision',fontsize=20)
plt.xlabel('Recall',fontsize=20)
    

# 绘制ROC曲线
FPR.sort()
plt.figure(figsize=(5,5))
plt.title('ROC curve',fontsize=14)
plt.plot(FPR,TPR)
plt.plot(FPR,TPR,'ro')
plt.ylabel('TPR',fontsize=14)
plt.xlabel('FPR',fontsize=14)


# 求AUC的值
i = 0
auc = 0
while(i < 8):
    auc = auc + (FPR[i+1] - FPR[i]) * (TPR[i] + TPR[i+1])
    i+=1
auc = float(auc/2)
print('auc=%.2f'%auc)




















